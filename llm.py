import streamlit as st
import pandas as pd
import google.generativeai as genai
import json
import re
from gtts import gTTS
import tempfile

# --- Configure Gemini API ---
API_KEY = "AIzaSyCyTkwozbaHsKNROHSRQ5j8D_GSHnaEx8U"
genai.configure(api_key=API_KEY)

# --- UI Config ---
st.set_page_config(page_title="Post-Discharge Dashboard", layout="wide")

# --- Translations for UI Labels ---
translations = {
    "English": {
        "title": "üè• Your Post-Discharge Care Dashboard",
        "caption": "Friendly, easy-to-understand guidance for patients after hospital discharge",
        "id": "üÜî Your ID",
        "age": "Age",
        "health": "Health",
        "risk": "Risk Level",
        "care_plan": "üìã Your Care Plan",
        "risk_section": "‚ö† Risk Level",
        "follow_up": "üìÖ Follow-Up",
        "monitoring": "‚ö† Monitoring",
        "tips": "üí° Helpful Tips",
        "listen": "üîä Listen to Your Care Plan"
    },
    "Tamil": {
        "title": "üè• ‡Æâ‡Æô‡Øç‡Æï‡Æ≥‡Øç ‡Æü‡Æø‡Æ∏‡Øç‡Æö‡Ææ‡Æ∞‡Øç‡Æú‡Øç ‡Æ™‡Æø‡Æ®‡Øç‡Æ§‡Øà‡ÆØ ‡Æ™‡Æ∞‡Ææ‡ÆÆ‡Æ∞‡Æø‡Æ™‡Øç‡Æ™‡ØÅ ‡Æü‡Ææ‡Æ∑‡Øç‡Æ™‡Øã‡Æ∞‡Øç‡Æü‡ØÅ",
        "caption": "‡ÆÆ‡Æ∞‡ØÅ‡Æ§‡Øç‡Æ§‡ØÅ‡Æµ‡ÆÆ‡Æ©‡Øà ‡Æü‡Æø‡Æ∏‡Øç‡Æö‡Ææ‡Æ∞‡Øç‡Æú‡Øç ‡ÆÜ‡Æ© ‡Æ™‡Æø‡Æ©‡Øç ‡Æ®‡Øã‡ÆØ‡Ææ‡Æ≥‡Æø‡Æï‡Æ≥‡ØÅ‡Æï‡Øç‡Æï‡Ææ‡Æ© ‡Æé‡Æ≥‡Æø‡ÆØ ‡Æµ‡Æ¥‡Æø‡Æï‡Ææ‡Æü‡Øç‡Æü‡Æø",
        "id": "üÜî ‡Æâ‡Æô‡Øç‡Æï‡Æ≥‡Øç ‡ÆÖ‡Æü‡Øà‡ÆØ‡Ææ‡Æ≥ ‡Æé‡Æ£‡Øç",
        "age": "‡Æµ‡ÆØ‡Æ§‡ØÅ",
        "health": "‡Æâ‡Æü‡Æ≤‡Øç‡Æ®‡Æø‡Æ≤‡Øà",
        "risk": "‡ÆÖ‡Æ™‡Ææ‡ÆØ ‡Æ®‡Æø‡Æ≤‡Øà",
        "care_plan": "üìã ‡Æâ‡Æô‡Øç‡Æï‡Æ≥‡Øç ‡Æ™‡Æ∞‡Ææ‡ÆÆ‡Æ∞‡Æø‡Æ™‡Øç‡Æ™‡ØÅ ‡Æ§‡Æø‡Æü‡Øç‡Æü‡ÆÆ‡Øç",
        "risk_section": "‚ö† ‡ÆÖ‡Æ™‡Ææ‡ÆØ ‡Æ®‡Æø‡Æ≤‡Øà",
        "follow_up": "üìÖ ‡Æ™‡Æø‡Æ©‡Øç‡Æ§‡Øä‡Æü‡Æ∞‡Øç‡Æ™‡ØÅ",
        "monitoring": "‚ö† ‡Æï‡Æ£‡Øç‡Æï‡Ææ‡Æ£‡Æø‡Æ™‡Øç‡Æ™‡ØÅ",
        "tips": "üí° ‡Æ™‡ÆØ‡Æ©‡ØÅ‡Æ≥‡Øç‡Æ≥ ‡Æï‡ØÅ‡Æ±‡Æø‡Æ™‡Øç‡Æ™‡ØÅ‡Æï‡Æ≥‡Øç",
        "listen": "üîä ‡Æâ‡Æô‡Øç‡Æï‡Æ≥‡Øç ‡Æ™‡Æ∞‡Ææ‡ÆÆ‡Æ∞‡Æø‡Æ™‡Øç‡Æ™‡ØÅ ‡Æ§‡Æø‡Æü‡Øç‡Æü‡Æ§‡Øç‡Æ§‡Øà ‡Æï‡Øá‡Æ≥‡ØÅ‡Æô‡Øç‡Æï‡Æ≥‡Øç"
    },
    "Hindi": {
        "title": "üè• ‡§Ü‡§™‡§ï‡§æ ‡§°‡§ø‡§∏‡•ç‡§ö‡§æ‡§∞‡•ç‡§ú ‡§ï‡•á ‡§¨‡§æ‡§¶ ‡§ï‡§æ ‡§°‡•à‡§∂‡§¨‡•ã‡§∞‡•ç‡§°",
        "caption": "‡§Æ‡§∞‡•Ä‡§ú‡•ã‡§Ç ‡§ï‡•á ‡§≤‡§ø‡§è ‡§∏‡§∞‡§≤ ‡§î‡§∞ ‡§Ü‡§∏‡§æ‡§® ‡§¶‡•á‡§ñ‡§≠‡§æ‡§≤ ‡§®‡§ø‡§∞‡•ç‡§¶‡•á‡§∂",
        "id": "üÜî ‡§Ü‡§™‡§ï‡•Ä ‡§™‡§π‡§ö‡§æ‡§®",
        "age": "‡§â‡§Æ‡•ç‡§∞",
        "health": "‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø",
        "risk": "‡§ú‡•ã‡§ñ‡§ø‡§Æ ‡§∏‡•ç‡§§‡§∞",
        "care_plan": "üìã ‡§Ü‡§™‡§ï‡•Ä ‡§¶‡•á‡§ñ‡§≠‡§æ‡§≤ ‡§Ø‡•ã‡§ú‡§®‡§æ",
        "risk_section": "‚ö† ‡§ú‡•ã‡§ñ‡§ø‡§Æ ‡§∏‡•ç‡§§‡§∞",
        "follow_up": "üìÖ ‡§´‡•â‡§≤‡•ã-‡§Ö‡§™",
        "monitoring": "‚ö† ‡§®‡§ø‡§ó‡§∞‡§æ‡§®‡•Ä",
        "tips": "üí° ‡§â‡§™‡§Ø‡•ã‡§ó‡•Ä ‡§∏‡•Å‡§ù‡§æ‡§µ",
        "listen": "üîä ‡§Ö‡§™‡§®‡•Ä ‡§¶‡•á‡§ñ‡§≠‡§æ‡§≤ ‡§Ø‡•ã‡§ú‡§®‡§æ ‡§∏‡•Å‡§®‡•á‡§Ç"
    },
    "Spanish": {
        "title": "üè• Su Panel de Atenci√≥n Post-Alta",
        "caption": "Gu√≠a sencilla y f√°cil de entender para pacientes despu√©s del alta hospitalaria",
        "id": "üÜî Su ID",
        "age": "Edad",
        "health": "Salud",
        "risk": "Nivel de Riesgo",
        "care_plan": "üìã Su Plan de Atenci√≥n",
        "risk_section": "‚ö† Nivel de Riesgo",
        "follow_up": "üìÖ Seguimiento",
        "monitoring": "‚ö† Monitoreo",
        "tips": "üí° Consejos √ötiles",
        "listen": "üîä Escuche su Plan de Atenci√≥n"
    },
    "French": {
        "title": "üè• Votre Tableau de Soins Apr√®s la Sortie",
        "caption": "Guide simple et facile √† comprendre pour les patients apr√®s la sortie de l'h√¥pital",
        "id": "üÜî Votre ID",
        "age": "√Çge",
        "health": "Sant√©",
        "risk": "Niveau de Risque",
        "care_plan": "üìã Votre Plan de Soins",
        "risk_section": "‚ö† Niveau de Risque",
        "follow_up": "üìÖ Suivi",
        "monitoring": "‚ö† Surveillance",
        "tips": "üí° Conseils Utiles",
        "listen": "üîä √âcoutez votre Plan de Soins"
    },
    "German": {
        "title": "üè• Ihr Entlassungs-Nachsorge-Dashboard",
        "caption": "Einfache, leicht verst√§ndliche Anleitung f√ºr Patienten nach der Krankenhausentlassung",
        "id": "üÜî Ihre ID",
        "age": "Alter",
        "health": "Gesundheit",
        "risk": "Risikostufe",
        "care_plan": "üìã Ihr Pflegeplan",
        "risk_section": "‚ö† Risikostufe",
        "follow_up": "üìÖ Nachsorge",
        "monitoring": "‚ö† √úberwachung",
        "tips": "üí° N√ºtzliche Tipps",
        "listen": "üîä H√∂ren Sie sich Ihren Pflegeplan an"
    },
    "Malayalam": {
        "title": "üè• ‡¥®‡¥ø‡¥ô‡µç‡¥ô‡¥≥‡µÅ‡¥ü‡µÜ ‡¥°‡¥ø‡¥∏‡µç‡¥ö‡¥æ‡µº‡¥ú‡µç ‡¥∂‡µá‡¥∑‡¥Æ‡µÅ‡¥≥‡µç‡¥≥ ‡¥™‡¥∞‡¥ø‡¥ö‡¥∞‡¥£ ‡¥°‡¥æ‡¥∑‡µç‡¥¨‡µã‡µº‡¥°‡µç",
        "caption": "‡¥Ü‡¥∂‡µÅ‡¥™‡¥§‡µç‡¥∞‡¥ø ‡¥°‡¥ø‡¥∏‡µç‡¥ö‡¥æ‡µº‡¥ú‡¥ø‡¥®‡µç ‡¥∂‡µá‡¥∑‡¥Ç ‡¥∞‡µã‡¥ó‡¥ø‡¥ï‡µæ‡¥ï‡µç‡¥ï‡µÅ‡¥≥‡µç‡¥≥ ‡¥≤‡¥≥‡¥ø‡¥§‡¥µ‡µÅ‡¥Ç ‡¥∏‡µÅ‡¥π‡µÉ‡¥§‡µç‡¥§‡µÅ‡¥∏‡¥π‡¥Æ‡¥æ‡¥Ø ‡¥Æ‡¥æ‡µº‡¥ó‡µç‡¥ó‡¥®‡¥ø‡µº‡¥¶‡µç‡¥¶‡µá‡¥∂‡¥ô‡µç‡¥ô‡µæ",
        "id": "üÜî ‡¥®‡¥ø‡¥ô‡µç‡¥ô‡¥≥‡µÅ‡¥ü‡µÜ ‡¥ê‡¥°‡¥ø",
        "age": "‡¥µ‡¥Ø‡¥∏‡µç‡¥∏‡µç",
        "health": "‡¥Ü‡¥∞‡µã‡¥ó‡µç‡¥Ø‡¥Ç",
        "risk": "‡¥±‡¥ø‡¥∏‡µç‚Äå‡¥ï‡µç ‡¥®‡¥ø‡¥≤",
        "care_plan": "üìã ‡¥®‡¥ø‡¥ô‡µç‡¥ô‡¥≥‡µÅ‡¥ü‡µÜ ‡¥™‡¥∞‡¥ø‡¥ö‡¥∞‡¥£ ‡¥™‡¥¶‡µç‡¥ß‡¥§‡¥ø",
        "risk_section": "‚ö† ‡¥±‡¥ø‡¥∏‡µç‚Äå‡¥ï‡µç ‡¥®‡¥ø‡¥≤",
        "follow_up": "üìÖ ‡¥´‡µã‡¥≥‡µã-‡¥Ö‡¥™‡µç‡¥™‡µç",
        "monitoring": "‚ö† ‡¥®‡¥ø‡¥∞‡µÄ‡¥ï‡µç‡¥∑‡¥£‡¥Ç",
        "tips": "üí° ‡¥â‡¥™‡¥ï‡¥æ‡¥∞‡¥™‡µç‡¥∞‡¥¶‡¥Æ‡¥æ‡¥Ø ‡¥®‡¥ø‡µº‡¥¶‡µç‡¥¶‡µá‡¥∂‡¥ô‡µç‡¥ô‡µæ",
        "listen": "üîä ‡¥®‡¥ø‡¥ô‡µç‡¥ô‡¥≥‡µÅ‡¥ü‡µÜ ‡¥™‡¥∞‡¥ø‡¥ö‡¥∞‡¥£ ‡¥™‡¥¶‡µç‡¥ß‡¥§‡¥ø ‡¥ï‡µá‡µæ‡¥ï‡µç‡¥ï‡µÅ‡¥ï"
    }
}


# --- Load Patient Data ---
csv_path = r"M:\doc\project\readmission_data_export.csv"
df = pd.read_csv(csv_path)
df["risk_category"] = df["READMIT_30"].apply(lambda x: "High" if x > 0 else "Low")

# --- Patient Input ---
subject_id = st.text_input("üîé Enter Your Patient ID")

if subject_id:
    if subject_id not in df["SUBJECT_ID"].astype(str).values:
        st.error(f"No patient found with ID: {subject_id}")
        st.stop()

    patient = df[df["SUBJECT_ID"].astype(str) == subject_id].iloc[0]

    # --- Language Selection ---
    language_options = ["English", "Hindi", "Spanish", "French", "Tamil", "German", "Malayalam"]
    preferred_language = st.selectbox("üåê Choose your preferred language:", language_options)

    if preferred_language:
        ui = translations.get(preferred_language, translations["English"])  # fallback to English

        # --- Title & Caption in Preferred Language ---
        st.title(ui["title"])
        st.caption(ui["caption"])

        model = genai.GenerativeModel("models/gemini-2.5-pro")

        # --- Prompt with Language ---
        prompt = f"""
You are a friendly healthcare guide speaking directly to the patient. 
Create a *simple and easy-to-follow post-discharge care plan*. Avoid medical jargon. Use short, clear sentences. 

Respond in *{preferred_language}*.

Include only these sections in STRICT JSON format:

{{
  "risk_level": {{
    "explanation": "Explain in simple words what the patient‚Äôs health risk is.",
    "things_to_watch": ["List of clear warning signs or symptoms the patient should monitor."]
  }},
  "follow_up_plan": [{{"appointment": "Doctor or visit type", "date": "When to go", "instructions": "Simple instructions for the patient"}}],
  "monitoring": {{
    "weight_check": ["Simple instructions to check weight"],
    "symptoms_to_watch": ["Which symptoms need urgent attention"]
  }},
  "tips": ["Extra advice in simple, clear language"]
}}

Patient Info:
- Age: {patient['age']}
- Health Condition: {patient['DIAGNOSIS']}
- Risk Level: {patient['risk_category']}
Respond strictly in JSON only. Use bullet points where possible and write in a friendly, patient-centered tone.
"""

        with st.spinner("‚ö° Preparing your care plan..."):
            try:
                response = model.generate_content(prompt)
                text = response.text.strip()
                text = re.sub(r"^json|$", "", text, flags=re.MULTILINE).strip()
                try:
                    parsed = json.loads(text)
                except json.JSONDecodeError:
                    match = re.search(r"(\{.*\})", text, re.DOTALL)
                    parsed = json.loads(match.group(1)) if match else {}
            except Exception as e:
                st.error(f"Failed to generate care plan: {e}")
                st.stop()

        # --- Dashboard ---
        st.markdown("---")
        col1, col2 = st.columns([1, 2])

        with col1:
            st.image("https://cdn-icons-png.flaticon.com/512/3135/3135715.png", width=100)
            st.subheader(f"{ui['id']}: {patient['SUBJECT_ID']}")
            st.write(f"{ui['age']}:** {patient['age']}")
            st.write(f"{ui['health']}:** {patient['DIAGNOSIS']}")
            st.write(f"{ui['risk']}:** {patient['risk_category']}")

        with col2:
            st.subheader(ui["care_plan"])

            st.markdown(f"### {ui['risk_section']}")
            risk = parsed.get("risk_level", {})
            st.write(f"{ui['risk']}:** {risk.get('explanation', 'N/A')}")
            for t in risk.get("things_to_watch", []):
                st.write(f"- {t}")

            st.markdown(f"### {ui['follow_up']}")
            fup = parsed.get("follow_up_plan", [])
            if fup:
                st.table(pd.DataFrame(fup))
            else:
                st.write("‚Äî")

            st.markdown(f"### {ui['monitoring']}")
            monitoring = parsed.get("monitoring", {})
            for w in monitoring.get("weight_check", []):
                st.write(f"- {w}")
            for s in monitoring.get("symptoms_to_watch", []):
                st.write(f"- {s}")

            st.markdown(f"### {ui['tips']}")
            for i, tip in enumerate(parsed.get("tips", []), 1):
                st.write(f"{i}. {tip}")

        st.markdown(f"### {ui['listen']}")
        care_text = []
        care_text.append(f"{ui['health']}: {patient['DIAGNOSIS']}.")
        care_text.append(f"{ui['risk']}: {risk.get('explanation', '')}")
        care_text.extend(risk.get("things_to_watch", []))
        for appt in fup:
            care_text.append(f"{appt.get('appointment')} - {appt.get('date')}: {appt.get('instructions')}")
        care_text.extend(monitoring.get("weight_check", []))
        care_text.extend(monitoring.get("symptoms_to_watch", []))
        care_text.extend(parsed.get("tips", []))

        final_text = " ".join(care_text)

        if final_text:
            tts_lang = "en"
            if preferred_language == "Hindi":
                tts_lang = "hi"
            elif preferred_language == "French":
                tts_lang = "fr"
            elif preferred_language == "Spanish":
                tts_lang = "es"
            elif preferred_language == "German":
                tts_lang = "de"
            elif preferred_language == "Tamil":
                tts_lang = "ta"
            elif preferred_language == "Malayalam":
                tts_lang = "ml"

            tts = gTTS(final_text, lang=tts_lang)
            with tempfile.NamedTemporaryFile(delete=False, suffix=".mp3") as tmp_file:
                tts.save(tmp_file.name)
                st.audio(tmp_file.name, format="audio/mp3")
